-- First, let's modify the existing stories table to match our needs
-- Add missing columns to stories table
ALTER TABLE stories ADD COLUMN IF NOT EXISTS cover_image_url TEXT;
ALTER TABLE stories ADD COLUMN IF NOT EXISTS user_id TEXT;
ALTER TABLE stories ADD COLUMN IF NOT EXISTS is_published BOOLEAN DEFAULT false;

-- Create chapters table linked to stories
CREATE TABLE IF NOT EXISTS chapters (
  id SERIAL PRIMARY KEY,
  story_id UUID NOT NULL REFERENCES stories(id) ON DELETE CASCADE,
  chapter_number INTEGER NOT NULL,
  title TEXT NOT NULL,
  content TEXT NOT NULL,
  user_id TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(story_id, chapter_number)
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_stories_user_id ON stories(user_id);
CREATE INDEX IF NOT EXISTS idx_chapters_story_id ON chapters(story_id);
CREATE INDEX IF NOT EXISTS idx_chapters_user_id ON chapters(user_id);
CREATE INDEX IF NOT EXISTS idx_chapters_story_chapter ON chapters(story_id, chapter_number);

-- Update RLS policies for stories to use user_id
DROP POLICY IF EXISTS "Users can insert their own stories" ON stories;
DROP POLICY IF EXISTS "Users can view their own stories" ON stories;
DROP POLICY IF EXISTS "Users can update their own stories" ON stories;
DROP POLICY IF EXISTS "Users can delete their own stories" ON stories;

CREATE POLICY "Users can insert their own stories" ON stories
FOR INSERT WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Users can view their own stories" ON stories
FOR SELECT USING (auth.uid()::text = user_id);

CREATE POLICY "Users can update their own stories" ON stories
FOR UPDATE USING (auth.uid()::text = user_id);

CREATE POLICY "Users can delete their own stories" ON stories
FOR DELETE USING (auth.uid()::text = user_id);

-- Enable RLS on chapters table
ALTER TABLE chapters ENABLE ROW LEVEL SECURITY;

-- RLS policies for chapters
CREATE POLICY "Users can insert their own chapters" ON chapters
FOR INSERT WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Users can view their own chapters" ON chapters
FOR SELECT USING (auth.uid()::text = user_id);

CREATE POLICY "Users can update their own chapters" ON chapters
FOR UPDATE USING (auth.uid()::text = user_id);

CREATE POLICY "Users can delete their own chapters" ON chapters
FOR DELETE USING (auth.uid()::text = user_id);

-- Update chapter_images table to reference chapters instead of chapter_id
-- First, let's make sure the foreign key constraint is properly set up
ALTER TABLE chapter_images DROP CONSTRAINT IF EXISTS chapter_images_chapter_id_fkey;
ALTER TABLE chapter_images ADD CONSTRAINT chapter_images_chapter_id_fkey 
FOREIGN KEY (chapter_id) REFERENCES chapters(id) ON DELETE CASCADE;

-- Create function to update updated_at timestamp if it doesn't exist
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers to automatically update updated_at
DROP TRIGGER IF EXISTS update_stories_updated_at ON stories;
CREATE TRIGGER update_stories_updated_at BEFORE UPDATE ON stories
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_chapters_updated_at ON chapters;
CREATE TRIGGER update_chapters_updated_at BEFORE UPDATE ON chapters
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();