-- Drop existing function first
DROP FUNCTION IF EXISTS get_user_stories_with_chapters(TEXT);

-- Create RPC function to get user stories with chapters bypassing RLS
CREATE OR REPLACE FUNCTION get_user_stories_with_chapters(p_user_id TEXT)
RETURNS TABLE (
  id UUID,
  title VARCHAR,
  description TEXT,
  cover_image_url TEXT,
  is_published BOOLEAN,
  created_at TIMESTAMPTZ,
  updated_at TIMESTAMPTZ,
  chapters JSONB
) 
SECURITY DEFINER
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT 
    s.id,
    s.title,
    s.description,
    s.cover_image_url,
    s.is_published,
    s.created_at,
    s.updated_at,
    COALESCE(
      jsonb_agg(
        jsonb_build_object(
          'id', c.id,
          'chapter_number', c.chapter_number,
          'title', c.title,
          'content', c.content,
          'created_at', c.created_at,
          'updated_at', c.updated_at
        ) ORDER BY c.chapter_number
      ) FILTER (WHERE c.id IS NOT NULL),
      '[]'::jsonb
    ) as chapters
  FROM stories s
  LEFT JOIN chapters c ON s.id = c.story_id AND c.user_id = p_user_id
  WHERE s.user_id = p_user_id
  GROUP BY s.id, s.title, s.description, s.cover_image_url, s.is_published, s.created_at, s.updated_at
  ORDER BY s.created_at DESC;
END;
$$;

-- Grant execute permission to authenticated and anon roles
GRANT EXECUTE ON FUNCTION get_user_stories_with_chapters(TEXT) TO authenticated;
GRANT EXECUTE ON FUNCTION get_user_stories_with_chapters(TEXT) TO anon;