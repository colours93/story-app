"use client"

import { useSession, signIn } from "next-auth/react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useEffect, useState } from "react"
import { User, BookOpen, Plus } from "lucide-react"
import Link from "next/link"

export default function HomePage() {
  const { data: session, status } = useSession()
  const router = useRouter()
  const [mounted, setMounted] = useState(false)
  const [stories, setStories] = useState<any[]>([])
  const [loading, setLoading] = useState(false)
  
  // Login form state
  const [username, setUsername] = useState("")
  const [password, setPassword] = useState("")
  const [loginLoading, setLoginLoading] = useState(false)
  const [error, setError] = useState("")

  useEffect(() => {
    setMounted(true)
  }, [])

  // Load user's stories when authenticated
  useEffect(() => {
    if (session && mounted) {
      const loadStories = async () => {
        setLoading(true)
        try {
          const response = await fetch('/api/stories')
          if (response.ok) {
            const { stories } = await response.json()
            console.log('Stories loaded:', stories) // Debug log
            if (stories && stories.length > 0) {
              console.log('First story chapters:', stories[0].chapters) // Debug log
              console.log('Chapter count:', stories[0].chapters?.length) // Debug log
            }
            setStories(stories || [])
          }
        } catch (error) {
          console.error('Failed to load stories:', error)
        } finally {
          setLoading(false)
        }
      }
      loadStories()
    }
  }, [session, mounted])

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoginLoading(true)
    setError("")

    try {
      const result = await signIn("credentials", {
        username,
        password,
        redirect: false,
      })

      if (result?.error) {
        setError("Invalid credentials")
      }
    } catch (error) {
      setError("Login failed")
    } finally {
      setLoginLoading(false)
    }
  }

  if (!mounted || status === 'loading') {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
      </div>
  )
}

  // Not authenticated - show login form
  if (!session) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 p-4">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <CardTitle className="text-2xl font-bold">Sign In</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleLogin} className="space-y-4">
              <div>
                <Label htmlFor="username">Username or Email</Label>
                <Input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  required
                />
              </div>
              <div>
                <Label htmlFor="password">Password</Label>
                <Input
                  id="password"
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                />
              </div>
              {error && (
                <div className="text-red-600 text-sm">{error}</div>
              )}
              <Button 
                type="submit" 
                className="w-full" 
                disabled={loginLoading}
              >
                {loginLoading ? "Signing in..." : "Sign In"}
              </Button>
            </form>
            <div className="mt-4 text-center">
              <Link href="/signup" className="text-sm text-blue-600 hover:underline">
                Don't have an account? Sign up
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  // Authenticated - show stories or profile
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mb-4"></div>
          <p>Loading your stories...</p>
        </div>
      </div>
    )
  }

  // User has stories - show them
  if (stories.length > 0) {
    return (
      <div className="min-h-screen bg-gray-50 p-4">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center justify-between mb-6">
            <h1 className="text-2xl font-bold">Your Stories</h1>
            {session.user.role === 'admin' && (
              <Link href="/admin">
                <Button>
                  <Plus className="w-4 h-4 mr-2" />
                  Manage Stories
                </Button>
              </Link>
            )}
          </div>
          
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {stories.map((story) => (
              <Card key={story.id} className="hover:shadow-md transition-shadow">
                <CardContent className="p-4">
                  <div className="flex items-center gap-3 mb-3">
                    <BookOpen className="w-5 h-5 text-gray-600" />
                    <h3 className="font-semibold">{story.title}</h3>
                  </div>
                  {story.description && (
                    <p className="text-sm text-gray-600 mb-3">{story.description}</p>
                  )}
                  <div className="flex justify-between items-center">
                    <span className="text-xs text-gray-500">
                      {story.chapters?.length || 0} chapters
                    </span>
                    <Link href="/story">
                      <Button size="sm">Read</Button>
                    </Link>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </div>
    )
  }

  // User has no stories - show simple profile
  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            <div className="bg-gray-100 p-3 rounded-full">
              <User className="w-8 h-8 text-gray-600" />
            </div>
          </div>
          <CardTitle className="text-xl">Welcome, {session.user?.name || session.user?.username}</CardTitle>
        </CardHeader>
        <CardContent className="text-center space-y-4">
          <p className="text-gray-600">You don't have any stories yet.</p>
          {session.user.role === 'admin' && (
            <Link href="/admin">
              <Button className="w-full">
                <Plus className="w-4 h-4 mr-2" />
                Create Your First Story
              </Button>
            </Link>
          )}
          {session.user.role !== 'admin' && (
            <p className="text-sm text-gray-500">
              Stories will appear here when they're available to you.
            </p>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
